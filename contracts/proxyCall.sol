// Apache License 2.0
// 7/31 21:12追加　
// URL: https://tech.bitbank.cc/20201222/
// あんまり使ってない
pragma solidity ^0.5.0;



contract mynumberContract{
    // signatureの型分からない
    // pubkeyはconstractで書く、後でかく
    // arg = calldata

    // bytes n;
    // bytes e;
    // 実験用：アドレスと作成時間がわかるように
    address public owner;
    uint public createAt;
    // constructor(bytes memory _n, bytes memory _e) public {
    //     _n = n;
    //     _e = e;
    //     // 実験用：アドレスと作成時間がわかるように
    //     owner = msg.sender;
    //     createAt = block.timestamp;
    // }
    // bytes signature = 0x866B66D33D512E5D4BBE37A92EFE3B94FAC8C36A914A4E18CA265F60FD10EF99BE3ECA7D1DB6726FEB2CEAA13A8D4162DD54AE605BBA73CF5ACE1F944901791C14B2E73CCD1271CE8D28B6EF2E0452703B8CD26B5CAA16DE695B0C239FBACC3B63B57358EF8794C84EF5FFEA2C54593CA3533E6FAFBB1A966D0730F1F2ACDFF7FC84786A89DE95AFA595D4589F6CE7DFF017193F8E2540684778277B7C2AB0F0F8324B7A355990CAF459948B6B5B97F6F00D0684178A84328A88384904FD5723BC51A0532053E39B996366B440177585ABCE3D163FE0C544CF9BA0E4FAEEB282460BF2B009A0AFC217430434C27941EF3123095BA0D19E6C10DCB4046201159B";
    // arg= "0xdfc0d6e
    
    // function testAbi() public returns (bytes memory){
    //     bytes memory  arr = signature;
    //     return abi.encodeWithSignature("bar(bytes memory)",arr);
    // }
    function callSetNum(bytes memory message, address proxy, address destination, bytes memory arg, bytes memory signature, bytes memory e, bytes memory n) public returns (string memory){

        Proxy a = Proxy(proxy);
        // bytes memory message = abi.encodePacked(destination, arg);
        bytes memory call_data = abi.encodeWithSignature("foo(bytes memory)",signature);
        Destination b = Destination(destination);
        if(a.verifySignature(message,signature,e,n)){
            (bool success, bytes memory retArg) = destination.call(arg);
            return b.setNum();
        }  
        (bool success, bytes memory retArg) = destination.call(arg);
        return "sorry";
        
    }
}


contract Destination {
    address public sender;

    function setNum() public returns (string memory) {
        sender = msg.sender;
        return "OK";
    }
}
